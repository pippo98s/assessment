!function(n){var e={};function r(t){if(e[t])return e[t].exports;var o=e[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=n,r.c=e,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(n,e){if(1&e&&(n=r(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)r.d(t,o,function(e){return n[e]}.bind(null,o));return t},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s=1)}([function(n,e,r){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r=function(n,e){var r=n[1]||"",t=n[3];if(!t)return r;if(e&&"function"==typeof btoa){var o=(a=t,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(d," */")),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[r].concat(i).concat([o]).join("\n")}var a,c,d;return[r].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(n,r,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);t&&o[d[0]]||(r&&(d[2]?d[2]="".concat(r," and ").concat(d[2]):d[2]=r),e.push(d))}},e}},function(n,e,r){"use strict";r.r(e);r(2);let t=[];let o=document.querySelectorAll("#card-trigger li a[data-sku]");o.forEach(n=>{n.addEventListener("click",()=>{let e=n.getAttribute("data-sku");fetch("https://jsonplaceholder.typicode.com/posts/"+e).then(n=>n.json()).then(n=>{((n,e,r)=>{if(!t.includes(r)){let o=document.getElementById("cards-holder"),a=document.createElement("div");a.setAttribute("class","card"),a.setAttribute("id","card-"+r),a.innerHTML=`\n                    <h3>${n}</h3>\n                    <p>${e}</p>\n                    <a>Remove card</a>\n                   `,o.appendChild(a),document.querySelector(`#card-${r} a`).addEventListener("click",(function(){i(r)})),t.push(r)}})(n.title,n.body,n.id)})})});const i=n=>{document.getElementById("card-"+n).remove();for(let e=0;e<t.length;e++)if(t[e]===n)return void t.splice(e)};document.getElementById("remover").addEventListener("click",()=>{document.getElementById("cards-holder").innerHTML="",t=[]}),document.getElementById("hamburger").addEventListener("click",()=>{document.querySelectorAll("#card-trigger li").forEach(n=>{"active"==n.getAttribute("class")?(n.classList.remove("active"),n.classList.add("none")):(n.classList.remove("none"),n.classList.add("active"))})})},function(n,e,r){var t=r(3),o=r(4);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1};t(o,i);n.exports=o.locals||{}},function(n,e,r){"use strict";var t,o=function(){return void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t},i=function(){var n={};return function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}n[e]=r}return n[e]}}(),a=[];function c(n){for(var e=-1,r=0;r<a.length;r++)if(a[r].identifier===n){e=r;break}return e}function d(n,e){for(var r={},t=[],o=0;o<n.length;o++){var i=n[o],d=e.base?i[0]+e.base:i[0],l=r[d]||0,s="".concat(d," ").concat(l);r[d]=l+1;var u=c(s),A={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(a[u].references++,a[u].updater(A)):a.push({identifier:s,updater:C(A,e),references:1}),t.push(s)}return t}function l(n){var e=document.createElement("style"),t=n.attributes||{};if(void 0===t.nonce){var o=r.nc;o&&(t.nonce=o)}if(Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])})),"function"==typeof n.insert)n.insert(e);else{var a=i(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var s,u=(s=[],function(n,e){return s[n]=e,s.filter(Boolean).join("\n")});function A(n,e,r,t){var o=r?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(n.styleSheet)n.styleSheet.cssText=u(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function p(n,e,r){var t=r.css,o=r.media,i=r.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var f=null,m=0;function C(n,e){var r,t,o;if(e.singleton){var i=m++;r=f||(f=l(e)),t=A.bind(null,r,i,!1),o=A.bind(null,r,i,!0)}else r=l(e),t=p.bind(null,r,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)};return t(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var r=d(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var t=0;t<r.length;t++){var o=c(r[t]);a[o].references--}for(var i=d(n,e),l=0;l<r.length;l++){var s=c(r[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}r=i}}}},function(n,e,r){"use strict";r.r(e);var t=r(0),o=r.n(t)()(!0);o.push([n.i,"*{margin:0;padding:0;box-sizing:border-box}.active{display:block}.none{display:none}@media screen and (min-width: 425px){.none{display:null}}body{text-align:center;background-color:#fff}body a#hamburger{width:40px;height:40px;display:inline-block;margin-top:40px}@media screen and (min-width: 425px){body a#hamburger{display:none}}body a#hamburger img{max-width:100%}body ul{list-style-type:none;margin:20px auto}body ul li{margin:10px 0;padding:10px 20px;border-radius:5px;background-color:yellow;display:inline-block}@media screen and (max-width: 425px){body ul li{display:none;width:80%;margin:10px auto}}@media screen and (min-width: 425px){body ul li{display:inline-block !important}}body a{color:inherit;text-decoration:none}body #cards-holder{margin:20px;display:flex;justify-content:space-around;flex-wrap:wrap}body #cards-holder .card{width:300px;padding:10px;margin:20px 0;background-color:#1a5cff;border-radius:5px;text-align:left}body #cards-holder .card h3,body #cards-holder .card p{text-transform:capitalize;margin:10px 0}body #cards-holder .card p{color:#fff}body #cards-holder .card a{width:max-content;margin:auto;display:block;padding:3px 10px;border-radius:5px;background-color:lawngreen;cursor:pointer}\n","",{version:3,sources:["webpack://src/styles/main.scss"],names:[],mappings:"AAEA,EACE,QAAS,CACT,SAAU,CACV,qBAAsB,CACvB,QAGC,aAAc,CACf,MAGC,YAAa,CACb,qCAFF,MAGM,YAAa,CAElB,CAED,KACE,iBAAkB,CAClB,qBAAsB,CAFxB,iBAII,UAAW,CACX,WAAY,CACZ,oBAAqB,CACrB,eAAgB,CAChB,qCARJ,iBASM,YAAa,CAKhB,CAdH,qBAYM,cAAe,CAZrB,QAgBI,oBAAqB,CACrB,gBAAiB,CAjBrB,WAmBM,aAAc,CACd,iBAAkB,CAClB,iBAAkB,CAClB,uBAAwB,CACxB,oBAAsB,CACtB,qCAxBN,WAyBQ,YAAa,CACb,SAAU,CACV,gBAAiB,CAKpB,CAHC,qCA7BN,WA8BQ,+BAAgC,CAEnC,CAhCL,OAmCI,aAAc,CACd,oBAAqB,CApCzB,mBAwCI,WAAY,CACZ,YAAa,CACb,4BAA6B,CAC7B,cAAe,CA3CnB,yBA6CM,WAAY,CACZ,YAAa,CACb,aAAc,CACd,wBAAyB,CACzB,iBAAkB,CAClB,eAAgB,CAlDtB,uDAoDQ,yBAA0B,CAC1B,aAAc,CArDtB,2BAwDQ,UAAW,CAxDnB,2BA2DQ,iBAAkB,CAClB,WAAY,CACZ,aAAc,CACd,gBAAiB,CACjB,iBAAkB,CAClB,0BAA2B,CAC3B,cAAe",sourcesContent:["$bp-mobile: 425px;\r\n\r\n*{\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.active{\r\n  display: block;\r\n}\r\n\r\n.none{\r\n  display: none;\r\n  @media screen and (min-width: $bp-mobile){\r\n      display: null;\r\n  }\r\n}\r\n\r\nbody{\r\n  text-align: center;\r\n  background-color: #fff;\r\n  a#hamburger {\r\n    width: 40px;\r\n    height: 40px;\r\n    display: inline-block;\r\n    margin-top: 40px;\r\n    @media screen and (min-width: $bp-mobile){\r\n      display: none;\r\n    }\r\n    img{\r\n      max-width: 100%;\r\n    }\r\n  }\r\n  ul{\r\n    list-style-type: none;\r\n    margin: 20px auto;\r\n    li{\r\n      margin: 10px 0;\r\n      padding: 10px 20px;\r\n      border-radius: 5px;\r\n      background-color: yellow;\r\n      display: inline-block ;\r\n      @media screen and (max-width: $bp-mobile){\r\n        display: none;\r\n        width: 80%;\r\n        margin: 10px auto;\r\n      }\r\n      @media screen and (min-width: $bp-mobile){\r\n        display: inline-block !important;\r\n      }\r\n    }\r\n  }\r\n  a{\r\n    color: inherit;\r\n    text-decoration: none;\r\n  }\r\n\r\n  #cards-holder{\r\n    margin: 20px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    flex-wrap: wrap;\r\n    .card{\r\n      width: 300px;\r\n      padding: 10px;\r\n      margin: 20px 0;\r\n      background-color: #1a5cff;\r\n      border-radius: 5px;\r\n      text-align: left;\r\n      h3,p{\r\n        text-transform: capitalize;\r\n        margin: 10px 0;\r\n      }\r\n      p{\r\n        color: #fff;\r\n      }\r\n      a{\r\n        width: max-content;\r\n        margin: auto;\r\n        display: block;\r\n        padding: 3px 10px;\r\n        border-radius: 5px;\r\n        background-color: lawngreen;\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n"],sourceRoot:""}]),e.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,